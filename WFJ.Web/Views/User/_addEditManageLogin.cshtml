@model WFJ.Models.ManagerUserFilterViewModel
<style type="text/css">
    .field-validation-error {
        color: red;
    }
</style>

@*@using (Html.BeginForm("AddUser", "Home", FormMethod.Post, new { @autocomplete = "off" }))*@
@using (Ajax.BeginForm("AddUser", "User", new AjaxOptions { OnSuccess = "onSuccess" }))
{
    <div>
        <div id="UserErrorMessages" style="color:red;"></div>
        <div class="row">
            @Html.HiddenFor(m => m.userViewModel.UserID)

            @if (!(Model.userViewModel.UserID > 0))
            {
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="password">Password</label>
                        @Html.TextBoxFor(m => m.userViewModel.Password, new { @class = "form-control serialnocls", @type = "password" })
                        @*@Html.ValidationMessageFor(m => m.userViewModel.Password)*@
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="clear">Password</label>
                        @Html.HiddenFor(m => m.userViewModel.Password)
                        @*<a href="/Account/ForgotPassword?email=@Model.userViewModel.Email" onclick="SendPasswrdResetLink(@Model.userViewModel.Email)" class="anchor-design d-block">Send Password Reset Link</a>*@
                        <a onclick="SendPasswordResetLink('@Model.userViewModel.Email');" class="anchor-design d-block">Send Password Reset Link</a>
                    </div>
                </div>
            }

            <div class="col-md-6">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    @Html.TextBoxFor(m => m.userViewModel.FirstName, new { @class = "form-control serialnocls" })
                    @Html.ValidationMessageFor(m => m.userViewModel.FirstName)
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    @Html.TextBoxFor(m => m.userViewModel.LastName, new { @class = "form-control serialnocls" })
                    @Html.ValidationMessageFor(m => m.userViewModel.LastName)
                </div>
            </div>



            <div class="col-md-6">
                <div class="form-group">
                    <label for="telephone">Telephone</label>
                    @Html.TextBoxFor(m => m.userViewModel.Telephone, new { @class = "form-control serialnocls" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="address1">Address1</label>
                    @Html.TextBoxFor(m => m.userViewModel.Address1, new { @class = "form-control serialnocls" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="address2">Address2</label>
                    @Html.TextBoxFor(m => m.userViewModel.Address2, new { @class = "form-control serialnocls" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="city">City</label>
                    @Html.TextBoxFor(m => m.userViewModel.City, new { @class = "form-control serialnocls" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="state">State</label>
                    @Html.TextBoxFor(m => m.userViewModel.State, new { @class = "form-control serialnocls" })
                    @Html.ValidationMessageFor(m => m.userViewModel.State)
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="postalCode">Postal Code</label>
                    @Html.TextBoxFor(m => m.userViewModel.PostalCode, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="email">Email</label>
                    @Html.TextBoxFor(m => m.userViewModel.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.userViewModel.Email)
                </div>
            </div>



            <div class="col-md-6">
                <div class="form-group">
                    <label for="userType">Type</label>
                    @Html.DropDownListFor(m => m.userViewModel.UserType, Model.UserType, "Select", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="active">Active</label>
                    @Html.DropDownListFor(m => m.userViewModel.IsActive, Model.Active, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="dashboardUser">Dashboard User</label>
                    @Html.DropDownListFor(m => m.userViewModel.IsDashboardUser, Model.DashboardUser, "Select", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="attorney">Attorney</label>
                    <select id="inputState"
                            class="form-control">
                        <option>N/A</option>
                    </select>
                </div>
            </div>

            <div class="col-md-12">
                <div class="form-group custom-multiselect-scroll">
                    <label>Client</label>
                    @Html.DropDownListFor(m => m.userViewModel.ClientId, Model.Clients, new { @id = "boot-multiselect2", @multiple = "multiple", @class = "multiselect", @onchange = "BindUserDropdownsByClient();" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="email">Manager</label>
                    @Html.DropDownListFor(m => m.userViewModel.ManagerUserId, Model.ManageUsers, "Select", new { @id = "manageUsers", @class = "form-control" })
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <label for="dashboardUser">User Access</label>
                    @Html.DropDownListFor(m => m.userViewModel.AccessLevelId, Model.AccessLevels, "Select", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-12">
                <div class="form-group custom-multiselect-scroll">
                    <label for="regions">Region</label>
                    @Html.DropDownListFor(m => m.userViewModel.RegionId, Model.Regions, new { @id = "boot-multiselect", @multiple = "multiple", @class = "multiselect" })
                </div>
            </div>

            <div class="col-md-12">
                <div class="form-group custom-multiselect-scroll">
                    <label for="inputState">Form(s)</label>
                    @Html.DropDownListFor(m => m.userViewModel.FormId, Model.Forms, new { @id = "boot-multiselect1", @multiple = "multiple", @class = "multiselect" })
                </div>
            </div>
        </div>
    </div>
    <div>
        <span id="AddEditErrorMsg" style="color:red;"></span>
        <br />
        <button type="button"
                class="btn btn-secondary"
                data-dismiss="modal">
            Close
        </button>
        <button type="submit" class="btn btn-primary">Save changes</button>
    </div>
}

<script src="~/Scripts/managelogin.js"></script>
@*<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.2/dist/jquery.validate.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.js"></script>*@
<script>
    function SendPasswordResetLink(email) {
        if (email == "" || email == null) {
            jQuery('#AddEditErrorMsg').text("Please enter email address").css("color", "red").delay(3000).fadeOut();
        }
        else {
            jQuery.ajax({
                type: "POST",
                url: "/Account/ForgotPassword",
                data: {
                    "email": email.trim()
                },
                success: function (data) {
                    if (data.success) {
                        jQuery('#AddEditErrorMsg').text();
                        jQuery('#AddEditErrorMsg').text(data.message).css("color", "green").show().delay(3000).fadeOut();
                    }
                    else {
                        jQuery('#AddEditErrorMsg').text();
                        jQuery('#AddEditErrorMsg').text(data.message).css("color", "red").show().delay(3000).fadeOut();
                    }

                }
            });
        }
    }



    function onSuccess(response) {
        if (response.Success) {
            $('#newdocument').modal('hide');
            //$('#AddUerMsg').text("");
            //$('#AddUerMsg').text(response.Message).css("color", "red").show().delay(3000).fadeOut();
            $.notify(response.Message, "success");
            GetDatafortable();
        }
        else {
            $("#UserErrorMessages").html("");
            if (response.ErrorMessages) {
                if (response.ErrorMessages.length > 0) {
                    var str = "<ul>"
                    var i;
                    for (i = 0; i < response.ErrorMessages.length; i++) {
                        str = str + "<li>" + response.ErrorMessages[i] + "</li>"
                    }
                    str = str + "</ul>"
                    $("#UserErrorMessages").html(str).show().delay(3000).fadeOut();
                }
            }
            //$('#AddEditErrorMsg').text("");
            //$('#AddEditErrorMsg').text(response.Message).css("color", "red").show().delay(3000).fadeOut();
             $.notify(response.Message, "error");
        }
    }
    function BindUserDropdownsByClient() {
        var userId = $("#userViewModel_UserID").val();
        var clientIds = $('#boot-multiselect2').val();
        $.ajax({
            type: "Get",
            url: "/User/BindUserDropdownsByClient?clientIds=" + clientIds + "&userId=" + userId,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.Success) {
                    $('#boot-multiselect').empty();
                    $('#boot-multiselect1').empty();
                    $('#manageUsers').empty();
                    $.each(response.regions, function (i, reg) {
                        $('#boot-multiselect').append('<option value="' + reg.Value + '">' + reg.Text + '</option>');
                    });
                    $.each(response.forms, function (i, form) {
                        $('#boot-multiselect1').append('<option value="' + form.Value + '">' + form.Text + '</option>');
                    });
                    $("#boot-multiselect").multiselect('destroy');
                    $("#boot-multiselect").multiselect({
                        includeSelectAllOption: true,
                        enableFiltering: true,
                    });
                    $("#boot-multiselect1").multiselect('destroy');
                    $("#boot-multiselect1").multiselect({
                        includeSelectAllOption: true,
                        enableFiltering: true,
                    });
                    $.each(response.manageUsers, function (i, manageuser) {
                        $('#manageUsers').append('<option value="' + manageuser.Value + '">' + manageuser.Text + '</option>');
                    });
                }
                else {
                    $('#requestError').text(response.Message);
                }
            },
            error: function (result) {
            }
        });
    }
</script>
